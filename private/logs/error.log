[29-Apr-2025 08:01:26 UTC] [DEBUG] Search keyword: 
[29-Apr-2025 08:01:26 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:01:29 UTC] [DEBUG] Search keyword: 
[29-Apr-2025 08:01:29 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:01:31 UTC] [DEBUG] Search keyword: Long
[29-Apr-2025 08:01:31 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:01:35 UTC] [DEBUG] Search keyword: 
[29-Apr-2025 08:01:35 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:01:40 UTC] [DEBUG] Search keyword: 
[29-Apr-2025 08:01:40 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:01:42 UTC] [DEBUG] Search keyword: 
[29-Apr-2025 08:01:42 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:01:44 UTC] [DEBUG] Search keyword: 
[29-Apr-2025 08:01:44 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:02:50 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:02:50 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:02:51 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:02:51 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:02:51 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:02:51 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:02:51 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:02:52 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:02:52 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:02:58 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:02:58 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:02:58 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:02:58 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:02:58 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:06:19 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:06:19 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:06:19 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:06:19 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:06:19 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:06:20 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:06:20 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:06:20 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:06:20 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:06:20 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:07:11 UTC] [DEBUG] Search keyword: 
[29-Apr-2025 08:07:11 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:08:33 UTC] [DEBUG] Search keyword: 
[29-Apr-2025 08:08:33 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:15:43 UTC] [DEBUG] Search keyword: 
[29-Apr-2025 08:15:43 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:15:44 UTC] [DEBUG] Search keyword: 
[29-Apr-2025 08:15:44 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:15:47 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:15:47 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:15:47 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:15:47 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:15:48 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:15:48 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:15:48 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:15:48 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:15:48 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:15:56 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:15:56 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  AND r.package_id = :package_id
[29-Apr-2025 08:15:56 UTC] Admin Transactions - Count Params: Array
(
    [:package_id] => 7
)

[29-Apr-2025 08:15:56 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  AND r.package_id = :package_id ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:15:56 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:package_id] => 7
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:15:57 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:15:57 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:15:57 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:15:57 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:15:57 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:16:03 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:16:03 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  AND (CAST(r.id AS CHAR) LIKE :search_id OR u.email LIKE :search_email)
[29-Apr-2025 08:16:03 UTC] Admin Transactions - Count Params: Array
(
    [:search_id] => %tran%
    [:search_email] => %tran%
)

[29-Apr-2025 08:16:03 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  AND (CAST(r.id AS CHAR) LIKE :search_id OR u.email LIKE :search_email) ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:16:03 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:search_id] => %tran%
    [:search_email] => %tran%
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:16:04 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:16:04 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:16:04 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:16:04 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:16:04 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:17:29 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:17:29 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:17:29 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:17:29 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:17:29 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:18:23 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:18:23 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:18:24 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:18:24 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:18:24 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:18:24 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:18:24 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:18:29 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:18:29 UTC] [PTA] Start approve transaction_id=20
[29-Apr-2025 08:18:29 UTC] [PTA] Transaction begun
[29-Apr-2025 08:18:29 UTC] [PTA] check SQL executed, rowCount=1
[29-Apr-2025 08:18:29 UTC] [PTA] fetched registration={"status":"rejected","user_id":88,"num_account":2,"start_time":"2025-04-27 15:11:38","end_time":"2025-07-27 15:11:38","location_id":63,"package_id":2}
[29-Apr-2025 08:18:29 UTC] [PTA] update registration executed, affectedRows=1
[29-Apr-2025 08:18:29 UTC] [PTA] update payment executed, affectedRows=1
[29-Apr-2025 08:18:29 UTC] [PTA] activate survey_account executed, affectedRows=0
[29-Apr-2025 08:18:29 UTC] Warning: No survey accounts found or enabled for approved registration ID: 20
[29-Apr-2025 08:18:29 UTC] [PTA] province_code=YBI, lastUser=YBI104, nextSeq=105, username=YBI105, password=0999999445
[29-Apr-2025 08:18:29 UTC] [PTA] cURL timeout set to 3s; calling URL=http://localhost:3000/private/actions/account/create_account.php with payload={"registration_id":20,"username_acc":"YBI105","password_acc":"0999999445","user_email":"tranhailong2408@gmail.com","location_id":63,"package_id":2,"start_time":"2025-04-29 15:18:29","end_time":"2025-07-29 15:18:29","enabled":1,"concurrent_user":1,"account_count":2}
[29-Apr-2025 08:18:29 UTC] DEBUG [Account Creation] URL: http://localhost:3000/private/actions/account/create_account.php
[29-Apr-2025 08:18:29 UTC] DEBUG [Account Creation] Payload: {"registration_id":20,"username_acc":"YBI105","password_acc":"0999999445","user_email":"tranhailong2408@gmail.com","location_id":63,"package_id":2,"start_time":"2025-04-29 15:18:29","end_time":"2025-07-29 15:18:29","enabled":1,"concurrent_user":1,"account_count":2}
[29-Apr-2025 08:18:32 UTC] [PTA] cURL finished: {"httpCode":0,"errno":28,"error":"Operation timed out after 3009 milliseconds with 0 bytes received","totalTime":3.009751}
[29-Apr-2025 08:18:32 UTC] [PTA] TransactionHistoryService updated
[29-Apr-2025 08:18:32 UTC] [PTA] Transaction committed successfully
[29-Apr-2025 08:18:32 UTC] PHP Warning:  Undefined variable $createdAccounts in E:\Application\laragon\www\rtk_web_admin\private\actions\purchase\process_transaction_approve.php on line 281
[29-Apr-2025 08:18:32 UTC] [CA] Start create_account request
[29-Apr-2025 08:18:32 UTC] [CA] Raw input: {"registration_id":20,"username_acc":"YBI105","password_acc":"0999999445","user_email":"tranhailong2408@gmail.com","location_id":63,"package_id":2,"start_time":"2025-04-29 15:18:29","end_time":"2025-07-29 15:18:29","enabled":1,"concurrent_user":1,"account_count":2}
[29-Apr-2025 08:18:32 UTC] [CA] registration_id=20, username_acc=YBI105, password_len=10
[29-Apr-2025 08:18:32 UTC] [CA] location_input=63
[29-Apr-2025 08:18:32 UTC] [CA] computed start_time_db=2025-04-29 15:18:29, end_time_db=2025-07-29 15:18:29
[29-Apr-2025 08:18:32 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:18:32 UTC] [CA] Validating user_email: tranhailong2408@gmail.com
[29-Apr-2025 08:18:32 UTC] [CA] Retrieved userId=88
[29-Apr-2025 08:18:32 UTC] [CA] Price=270000.00 => normal flow
[29-Apr-2025 08:18:32 UTC] Debug: Non-trial account creation path for registration_id=20
[29-Apr-2025 08:18:32 UTC] [CA] RTK API payload for YBI105: {"name":"YBI105","userPwd":"0999999445","startTime":1745914709000,"endTime":1753777109000,"enabled":1,"numOnline":1,"customerName":"Long2004","customerPhone":"0999999445","customerBizType":1,"customerCompany":"","casterIds":[],"regionIds":[],"mountIds":[44,45,46,47,48,49,60,64]}
[29-Apr-2025 08:18:32 UTC] [CA] RTK API response for YBI105: {"success":true,"data":{"id":882,"name":"YBI105","userPwd":"0999999445","startTime":1745914709000,"endTime":1753777109000,"enabled":1,"numOnline":1,"casterIds":null,"regionIds":[],"casterNames":null,"mountIds":[44,45,46,47,48,49,60,64],"mountNames":null,"customerBizType":1,"customerName":"Long2004","customerPhone":"0999999445","customerCompany":""},"error":null}
[29-Apr-2025 08:18:32 UTC] [CA] RTK API payload for YBI106: {"name":"YBI106","userPwd":"0999999445","startTime":1745914709000,"endTime":1753777109000,"enabled":1,"numOnline":1,"customerName":"Long2004","customerPhone":"0999999445","customerBizType":1,"customerCompany":"","casterIds":[],"regionIds":[],"mountIds":[44,45,46,47,48,49,60,64]}
[29-Apr-2025 08:18:32 UTC] [CA] RTK API response for YBI106: {"success":true,"data":{"id":883,"name":"YBI106","userPwd":"0999999445","startTime":1745914709000,"endTime":1753777109000,"enabled":1,"numOnline":1,"casterIds":null,"regionIds":[],"casterNames":null,"mountIds":[44,45,46,47,48,49,60,64],"mountNames":null,"customerBizType":1,"customerName":"Long2004","customerPhone":"0999999445","customerCompany":""},"error":null}
[29-Apr-2025 08:18:40 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:18:40 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:18:40 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:18:40 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:18:40 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:18:41 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:18:41 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:18:49 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:18:49 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:18:49 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:18:49 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:18:49 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:22:53 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:22:53 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:22:53 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:22:53 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:22:53 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:24:50 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:24:50 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:24:50 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:24:50 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:24:50 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:26:20 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:26:20 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:26:20 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:26:20 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:26:20 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:26:27 UTC] [DEBUG] Search keyword: 
[29-Apr-2025 08:26:27 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:26:27 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:26:27 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:27:08 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:27:08 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:27:08 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:27:08 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:27:08 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:27:14 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:27:14 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:27:23 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:27:26 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:27:37 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:27:41 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:27:41 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:27:41 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:27:41 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:27:43 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:27:43 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:27:43 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:27:43 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:27:43 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:27:48 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:27:48 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:27:50 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:27:52 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:27:53 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:27:53 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:27:53 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:27:53 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:27:53 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:27:56 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:27:56 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:27:56 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:27:56 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:27:56 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:29:56 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:29:56 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:29:56 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:29:56 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:34:01 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:34:01 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:34:01 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:34:01 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:34:02 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:34:02 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:34:02 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:34:02 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:34:03 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:34:03 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:34:03 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:34:03 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:34:04 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:34:04 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:34:04 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:34:04 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:34:04 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:34:04 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:34:04 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:34:04 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:34:04 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:34:06 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:34:06 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:34:06 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:34:06 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:34:06 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:34:07 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:34:07 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:34:07 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:34:07 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:35:15 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:35:15 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:35:15 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:35:15 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:35:41 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  AND DATE(r.created_at) >= :date_from AND DATE(r.created_at) <= :date_to
[29-Apr-2025 08:35:41 UTC] Admin Transactions - Count Params: Array
(
    [:date_from] => 2022-02-22
    [:date_to] => 2025-02-22
)

[29-Apr-2025 08:35:41 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  AND DATE(r.created_at) >= :date_from AND DATE(r.created_at) <= :date_to ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:35:41 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:date_from] => 2022-02-22
    [:date_to] => 2025-02-22
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:35:53 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  AND DATE(r.created_at) >= :date_from AND DATE(r.created_at) <= :date_to
[29-Apr-2025 08:35:53 UTC] Admin Transactions - Count Params: Array
(
    [:date_from] => 2022-02-22
    [:date_to] => 2025-02-22
)

[29-Apr-2025 08:35:53 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  AND DATE(r.created_at) >= :date_from AND DATE(r.created_at) <= :date_to ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:35:53 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:date_from] => 2022-02-22
    [:date_to] => 2025-02-22
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:42:54 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:42:54 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:43:29 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:43:29 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:47:56 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:47:56 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:47:56 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:47:56 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:47:56 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:47:56 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:47:56 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:47:56 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:47:56 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:47:57 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:47:57 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:47:57 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:47:57 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:47:57 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:48:25 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:48:25 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:48:26 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:48:26 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:48:27 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:48:27 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:48:27 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:48:27 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:48:27 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:48:57 UTC] PHP Notice:  session_start(): Ignoring session_start() because a session is already active (started from E:\Application\laragon\www\rtk_web_admin\public\actions\invoice\index.php on line 2) in E:\Application\laragon\www\rtk_web_admin\private\actions\purchase\process_transaction_approve.php on line 12
[29-Apr-2025 08:48:57 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:48:57 UTC] [PTA] Start approve transaction_id=20
[29-Apr-2025 08:48:57 UTC] [PTA] Transaction begun
[29-Apr-2025 08:48:57 UTC] [PTA] check SQL executed, rowCount=1
[29-Apr-2025 08:48:57 UTC] [PTA] fetched registration={"status":"rejected","user_id":88,"num_account":2,"start_time":"2025-04-29 15:18:29","end_time":"2025-07-29 15:18:29","location_id":63,"package_id":2}
[29-Apr-2025 08:48:57 UTC] [PTA] update registration executed, affectedRows=1
[29-Apr-2025 08:48:57 UTC] [PTA] update payment executed, affectedRows=1
[29-Apr-2025 08:48:57 UTC] [PTA] activate survey_account executed, affectedRows=0
[29-Apr-2025 08:48:57 UTC] Warning: No survey accounts found or enabled for approved registration ID: 20
[29-Apr-2025 08:48:57 UTC] [PTA] province_code=YBI, lastUser=YBI106, nextSeq=107, username=YBI107, password=0999999445
[29-Apr-2025 08:48:57 UTC] [PTA] cURL timeout set to 3s; calling URL=http://localhost:3000/private/actions/account/create_account.php with payload={"registration_id":20,"username_acc":"YBI107","password_acc":"0999999445","user_email":"tranhailong2408@gmail.com","location_id":63,"package_id":2,"start_time":"2025-04-29 15:48:57","end_time":"2025-07-29 15:48:57","enabled":1,"concurrent_user":1,"account_count":2}
[29-Apr-2025 08:48:57 UTC] DEBUG [Account Creation] URL: http://localhost:3000/private/actions/account/create_account.php
[29-Apr-2025 08:48:57 UTC] DEBUG [Account Creation] Payload: {"registration_id":20,"username_acc":"YBI107","password_acc":"0999999445","user_email":"tranhailong2408@gmail.com","location_id":63,"package_id":2,"start_time":"2025-04-29 15:48:57","end_time":"2025-07-29 15:48:57","enabled":1,"concurrent_user":1,"account_count":2}
[29-Apr-2025 08:49:00 UTC] [PTA] cURL finished: {"httpCode":0,"errno":28,"error":"Operation timed out after 3016 milliseconds with 0 bytes received","totalTime":3.016731}
[29-Apr-2025 08:49:00 UTC] [PTA] TransactionHistoryService updated
[29-Apr-2025 08:49:00 UTC] [PTA] Transaction committed successfully
[29-Apr-2025 08:49:00 UTC] PHP Warning:  Undefined variable $createdAccounts in E:\Application\laragon\www\rtk_web_admin\private\actions\purchase\process_transaction_approve.php on line 281
[29-Apr-2025 08:49:00 UTC] [CA] Start create_account request
[29-Apr-2025 08:49:00 UTC] [CA] Raw input: {"registration_id":20,"username_acc":"YBI107","password_acc":"0999999445","user_email":"tranhailong2408@gmail.com","location_id":63,"package_id":2,"start_time":"2025-04-29 15:48:57","end_time":"2025-07-29 15:48:57","enabled":1,"concurrent_user":1,"account_count":2}
[29-Apr-2025 08:49:00 UTC] [CA] registration_id=20, username_acc=YBI107, password_len=10
[29-Apr-2025 08:49:00 UTC] [CA] location_input=63
[29-Apr-2025 08:49:00 UTC] [CA] computed start_time_db=2025-04-29 15:48:57, end_time_db=2025-07-29 15:48:57
[29-Apr-2025 08:49:00 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:49:00 UTC] [CA] Validating user_email: tranhailong2408@gmail.com
[29-Apr-2025 08:49:00 UTC] [CA] Retrieved userId=88
[29-Apr-2025 08:49:00 UTC] [CA] Price=270000.00 => normal flow
[29-Apr-2025 08:49:00 UTC] Debug: Non-trial account creation path for registration_id=20
[29-Apr-2025 08:49:00 UTC] [CA] RTK API payload for YBI107: {"name":"YBI107","userPwd":"0999999445","startTime":1745916537000,"endTime":1753778937000,"enabled":1,"numOnline":1,"customerName":"Long2004","customerPhone":"0999999445","customerBizType":1,"customerCompany":"","casterIds":[],"regionIds":[],"mountIds":[44,45,46,47,48,49,60,64]}
[29-Apr-2025 08:49:00 UTC] [CA] RTK API response for YBI107: {"success":true,"data":{"id":884,"name":"YBI107","userPwd":"0999999445","startTime":1745916537000,"endTime":1753778937000,"enabled":1,"numOnline":1,"casterIds":null,"regionIds":[],"casterNames":null,"mountIds":[44,45,46,47,48,49,60,64],"mountNames":null,"customerBizType":1,"customerName":"Long2004","customerPhone":"0999999445","customerCompany":""},"error":null}
[29-Apr-2025 08:49:00 UTC] [CA] RTK API payload for YBI108: {"name":"YBI108","userPwd":"0999999445","startTime":1745916537000,"endTime":1753778937000,"enabled":1,"numOnline":1,"customerName":"Long2004","customerPhone":"0999999445","customerBizType":1,"customerCompany":"","casterIds":[],"regionIds":[],"mountIds":[44,45,46,47,48,49,60,64]}
[29-Apr-2025 08:49:00 UTC] [CA] RTK API response for YBI108: {"success":true,"data":{"id":885,"name":"YBI108","userPwd":"0999999445","startTime":1745916537000,"endTime":1753778937000,"enabled":1,"numOnline":1,"casterIds":null,"regionIds":[],"casterNames":null,"mountIds":[44,45,46,47,48,49,60,64],"mountNames":null,"customerBizType":1,"customerName":"Long2004","customerPhone":"0999999445","customerCompany":""},"error":null}
[29-Apr-2025 08:49:02 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:49:02 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:49:02 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:49:02 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:49:02 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:49:03 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:49:03 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:49:06 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:49:06 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:49:06 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:49:06 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:49:06 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:49:14 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:49:14 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:49:14 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:49:14 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:49:14 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:49:15 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:49:15 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:49:17 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:49:28 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:49:28 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:49:28 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:49:28 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:49:28 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:49:34 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:49:34 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:49:34 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:49:34 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:49:35 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:49:35 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:49:35 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:49:35 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:49:35 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:49:38 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:49:38 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:49:39 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:49:39 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:49:39 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:49:39 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:49:40 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:49:40 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:49:40 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:49:40 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:49:40 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:49:40 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:49:40 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:49:40 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:49:40 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 08:50:43 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:50:43 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:50:43 UTC] [DEBUG] Search keyword: 
[29-Apr-2025 08:50:43 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:53:51 UTC] Executing SQL: 
        SELECT
            sa.id, sa.username_acc, sa.enabled, sa.created_at, sa.password_acc, sa.concurrent_user, sa.caster, sa.user_type, sa.regionIds, sa.customerBizType, sa.area,
            r.id as registration_id, r.start_time AS activation_date, r.end_time AS expiry_date, r.status AS registration_status, r.num_account,
            u.id as user_id, u.email AS user_email, u.username AS user_username,
            p.id as package_id, p.name AS package_name, p.package_id AS package_identifier,
            l.id as location_id, l.province AS location_name
        FROM survey_account sa
        JOIN registration r ON sa.registration_id = r.id
        JOIN user u ON r.user_id = u.id
        LEFT JOIN package p ON r.package_id = p.id
        JOIN location l ON r.location_id = l.id
        WHERE r.deleted_at IS NULL AND sa.deleted_at IS NULL AND u.deleted_at IS NULL
     ORDER BY sa.created_at DESC LIMIT :limit OFFSET :offset
[29-Apr-2025 08:53:51 UTC] With parameters: Array
(
    [:limit] => 10
    [:offset] => 0
)

[29-Apr-2025 08:53:51 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 08:53:51 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 08:53:51 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 08:53:51 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 08:53:51 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 09:14:25 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 09:14:25 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 09:14:25 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 09:14:25 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 09:14:25 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 09:15:14 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 09:15:14 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 09:15:14 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 09:15:14 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 09:15:14 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 09:42:27 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 09:42:27 UTC] Admin Transactions - Count Query: SELECT COUNT(r.id) 
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL 
[29-Apr-2025 09:42:27 UTC] Admin Transactions - Count Params: Array
(
)

[29-Apr-2025 09:42:27 UTC] Admin Transactions - Data Query (Recheck): 
            SELECT
                r.id as registration_id,
                r.created_at as request_date,
                r.total_price as amount,
                r.status as registration_status,
                r.rejection_reason, -- Fetch rejection reason
                u.email as user_email,
                p.name as package_name,
                pay.payment_image, -- Get proof image filename from payment table
                r.location_id,
                l.province AS province
        
            FROM registration r
            JOIN user u ON r.user_id = u.id
            JOIN package p ON r.package_id = p.id
            LEFT JOIN payment pay ON r.id = pay.registration_id -- Use LEFT JOIN in case payment proof hasn't been uploaded yet
            LEFT JOIN location l ON l.id = r.location_id
         WHERE r.deleted_at IS NULL  ORDER BY r.created_at DESC LIMIT :limit_val OFFSET :offset_val
[29-Apr-2025 09:42:27 UTC] Admin Transactions - All Params (bound via bindValue): Array
(
    [:limit_val] => 15
    [:offset_val] => 0
)

[29-Apr-2025 09:48:28 UTC] [Database Connect] Connection to database 'surveying_account' successful.
[29-Apr-2025 09:50:17 UTC] [DEBUG] Search keyword: 
[29-Apr-2025 09:50:17 UTC] [Database Connect] Connection to database 'surveying_account' successful.
